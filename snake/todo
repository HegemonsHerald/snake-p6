

NOTE: I've disabled the autocmd that changes the vim guicursor to a pipe-line. That was the cause of 'q's showing up in tmux....
NOTE: My game pause isn't actually a game pause, cause the timers keep ticking, they just stop doing things. I think it's just about fine enough for me...

NOTE: I am using mostly obvious indentation rules, eg { stay on the line the block's definition is on, etc... but a few special things have emerged
      If there is more than one paragraph of code in a code block, before and after the code come empty lines, for readability. Same thing with comments.
      I won't leave spaces between () and code, unless it serves readability. This is a thing I won't necessarily be consistent on!
      And generally: I will break with notational convention, whenever it serves readability!



NEXT UP:

	- bug: if the snake collides with its tail end, it collides with a segment, that'll be moved away. The game-over doesn't work there
		- reason: getch.
			  Since there is no timeout in the getch while loop in game() a call to getch is made,
			  before that while loop can quit, when $GAME-OVER is set. That getch() call has to return
			  before the while loop can end and thereby the game-over call from game() can be made.

			  Introducing a delay between keypresses helps, but makes the game harder to use.

			  Using getch it won't be possible to have the game check for $GAME-OVER again (after the getch call)
			  after a while.

			  A possible solution is yet another global flag variable, that tells the game, wether
			  game-over() has already been called or not. If it has been called, no need for it to be
			  called from after the while loop in game(). Obviously the collision detection code then
			  has to call game-over(). I don't like this solution as it would stack function calls again,
			  which I am trying to avoid... Also, I really don't want another global variable. I have
			  too many of them anyways.

			  This is a bug, that I will not fix, but at least I now understand it.

			  â‡’ research: perl6 timeout, call function with timeout, kill function call
